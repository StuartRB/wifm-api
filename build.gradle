buildscript {
	ext {
		springBootVersion = '1.3.6.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
	}
}

apply plugin: 'java'
//apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot' 

jar {
	baseName = 'watchit-api'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter')
    compile("org.springframework.boot:spring-boot-starter-web")
    compile('com.google.code.gson:gson:2.7')
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'

    testCompile('org.springframework.boot:spring-boot-starter-test')
}

sourceSets {
	itest {
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output

		// You can add other directories to the classpath like this:
		runtimeClasspath += files('src/test/java/comtest/watchitforme/integration')

		// Use "java" if you don't use Scala as a programming language
		//scala.srcDir file('src/itest/scala')
	}

	// This is just to trick IntelliJ IDEA to add integration test
	// resources to classpath when running integration tests from
	// the IDE. It's is not a good solution but I don't know about
	// a better one.
	test {
		resources.srcDir file('src/itest/resources')
	}
}

task testIntegration(type: Test) {
	testClassesDir = sourceSets.itest.output.classesDir
	classpath = sourceSets.itest.runtimeClasspath

	// This is not needed, but I like to see which tests have run
	testLogging {
		events "passed", "skipped", "failed"
	}
}

//eclipse {
//	classpath {
//		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
//		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
//	}
//}
